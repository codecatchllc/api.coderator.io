// Prisma schema file
// See https://www.prisma.io/docs/concepts/components/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id Int @id @default(autoincrement()) 
  email String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  username String @db.VarChar(255) @unique
  biography String @db.VarChar(160) @default("This user has not yet set their bio")
  verified Boolean @default(false)
  createdAt DateTime @default(now())
  lastLoginAt DateTime @default(now())
  isActive Boolean @default(true)
  posts Post[]
  followedBy Follows[] @relation("following")
  following  Follows[] @relation("follower")
  isOAuthAccount Boolean @default(false)
  authProvider String @db.VarChar(255)
  @@index([email])
}

model Follows {
  id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
  @@index([id], name: "id")
}


model Post {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  title String @db.VarChar(100) @default("Untitled")
  content String @db.VarChar(40000)
  language String @db.VarChar(50) @default("plaintext")
  privacy String @db.VarChar(7)
  createdAt DateTime @default(now())
  expirationDate DateTime?

  @@index([title])
}

model Session {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user             User      @relation(fields: [userId], references: [id])
  userId           Int
  title            String    @default("Untitled") @db.VarChar(100)
  content          String    @db.VarChar(40000)
  language         String    @default("plaintext") @db.VarChar(50)
  privacy          String
  createdAt        DateTime  @default(now())
  expirationDate   DateTime?
  sessionTimeout   DateTime?
  currentUserCount Int
  currentUserList  Json?
}