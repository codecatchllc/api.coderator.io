// Prisma schema file
// See https://www.prisma.io/docs/concepts/components/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String    @unique @db.VarChar(255)
  password       String    @db.VarChar(255)
  username       String    @unique @db.VarChar(255)
  biography      String    @default("This user has not yet set their bio") @db.VarChar(160)
  verified       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  lastLoginAt    DateTime  @default(now())
  isActive       Boolean   @default(false)
  posts          Post[]
  followedBy     Follows[] @relation("following")
  following      Follows[] @relation("follower")
  isOAuthAccount Boolean   @default(false)
  authProvider   String    @db.VarChar(255)
  isTempUser     Boolean   @default(false)

  @@index([email])
}

model Follows {
  id          String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String   @db.Uuid
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String   @db.Uuid

  @@id([followerId, followingId])
  @@index([id], name: "id")
}

model Post {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @db.Uuid
  title          String    @default("Untitled") @db.VarChar(100)
  content        String    @db.VarChar(40000)
  language       String    @default("plaintext") @db.VarChar(50)
  privacy        String    @db.VarChar(8)
  createdAt      DateTime  @default(now())
  expirationDate DateTime?
  sessionTimeout   DateTime?
  currentUserCount Int?
  currentUserList  Json?

  @@index([title])
}
